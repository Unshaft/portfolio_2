[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.1","content-config-digest","d346843f3eb9571e","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"http://localhost:4321\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{\"/\":\"/fr\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,67,68,117,118,156,157,204,205,242,243],"badminton-ml_en",{"id":11,"data":13,"body":31,"filePath":32,"digest":33,"rendered":34,"legacyId":66},{"title":14,"locale":15,"description":16,"image":17,"github":18,"stack":19,"tag":25,"translationOf":27,"startDate":28,"endDate":18,"updatedDate":29,"category":30},"🏸 Badminton Shot Classifier","en","A machine learning module to identify shots in a badminton match and help players better understand their game.","/img/process.png","",[20,21,22,23,24],"Python","scikit-learn","OpenCV","MediaPipe","Pandas",[26],"Coming soon","badminton-ml","2024-10-01","2025-07-24","perso","## 🧩 Context\r\n\r\nThis project is part of **DataBad**, my personal initiative to help badminton players analyze their matches through data.  \r\nThe broader goal is to better understand one's own playing style, identify areas for improvement, and support personalized training.\r\n\r\nThis shot classifier is one of the core modules in the suite: it aims to automatically identify shot types (clear, smash, drop, etc.) from match video footage.\r\n\r\nOriginally designed for my own use, this tool could eventually benefit **players, coaches, clubs, and federations** interested in leveraging data for performance analysis.\r\n\r\n---\r\n\r\n## 🎯 Objectives\r\n\r\n- Detect the **start and end** of each rally\r\n- Automatically identify **serves** and score the match\r\n- Classify **shot types** played (coming later)\r\n- Enable post-match analysis and automatic highlights\r\n- Provide a solid base for individualized coaching\r\n\r\n---\r\n\r\n## 🎥 Data & annotations\r\n\r\nThe project uses footage filmed from my own matches, representing several hours of play.  \r\nI plan to manually annotate the initial dataset with:\r\n\r\n- Timecodes for serves\r\n- Rally start/end points\r\n- Shot types (in later phases)\r\n\r\nAnnotations will be stored in standard formats (CSV or JSON).\r\n\r\n---\r\n\r\n## 🧠 Technical pipeline\r\n\r\nThe pipeline follows this structure:\r\n\r\n1. **Pose estimation** using MediaPipe\r\n2. **Feature extraction** per frame (position, movement, static/dynamic)\r\n3. ML model prediction\r\n4. Shot classification\r\n\r\n- 30 FPS video processing\r\n- Features extracted with OpenCV and Pandas\r\n\r\n---\r\n\r\n## 🤖 Machine Learning\r\n\r\n- Initial model: **Random Forest**\r\n- Model saved using **joblib**\r\n- Evaluation metrics: **accuracy**, **confusion matrix**, **ROC curve**, **AUC**\r\n- May evolve toward **deep learning** depending on results\r\n\r\nDevelopment will start in notebooks and later be modularized into reusable Python components.\r\n\r\n---\r\n\r\n## 🧩 Integration with DataBad\r\n\r\nThis classifier will be integrated into the **match review** section of DataBad, to provide users with **automatic summaries** of their rallies and shot patterns.\r\n\r\nEventually, this should enable:\r\n- **Targeted stats** (e.g. smash success rate)\r\n- **Automatic match highlights**\r\n- **Visual overlays** of predictions on the video timeline\r\n\r\nThe module will run locally, designed for individual players first.\r\n\r\n---\r\n\r\n## 🚧 Status\r\n\r\nThe project is still in the **prototype phase**.  \r\nNext steps include:\r\n- Manual annotation of initial matches\r\n- Testing basic models\r\n- Evaluating performance on a small dataset\r\n\r\n---","src/content/projects/badminton-ml.en.md","b1927482b7af567a",{"html":35,"metadata":36},"\u003Ch2 id=\"-context\">🧩 Context\u003C/h2>\n\u003Cp>This project is part of \u003Cstrong>DataBad\u003C/strong>, my personal initiative to help badminton players analyze their matches through data.\u003Cbr>\nThe broader goal is to better understand one’s own playing style, identify areas for improvement, and support personalized training.\u003C/p>\n\u003Cp>This shot classifier is one of the core modules in the suite: it aims to automatically identify shot types (clear, smash, drop, etc.) from match video footage.\u003C/p>\n\u003Cp>Originally designed for my own use, this tool could eventually benefit \u003Cstrong>players, coaches, clubs, and federations\u003C/strong> interested in leveraging data for performance analysis.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-objectives\">🎯 Objectives\u003C/h2>\n\u003Cul>\n\u003Cli>Detect the \u003Cstrong>start and end\u003C/strong> of each rally\u003C/li>\n\u003Cli>Automatically identify \u003Cstrong>serves\u003C/strong> and score the match\u003C/li>\n\u003Cli>Classify \u003Cstrong>shot types\u003C/strong> played (coming later)\u003C/li>\n\u003Cli>Enable post-match analysis and automatic highlights\u003C/li>\n\u003Cli>Provide a solid base for individualized coaching\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-data--annotations\">🎥 Data &#x26; annotations\u003C/h2>\n\u003Cp>The project uses footage filmed from my own matches, representing several hours of play.\u003Cbr>\nI plan to manually annotate the initial dataset with:\u003C/p>\n\u003Cul>\n\u003Cli>Timecodes for serves\u003C/li>\n\u003Cli>Rally start/end points\u003C/li>\n\u003Cli>Shot types (in later phases)\u003C/li>\n\u003C/ul>\n\u003Cp>Annotations will be stored in standard formats (CSV or JSON).\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-technical-pipeline\">🧠 Technical pipeline\u003C/h2>\n\u003Cp>The pipeline follows this structure:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Pose estimation\u003C/strong> using MediaPipe\u003C/li>\n\u003Cli>\u003Cstrong>Feature extraction\u003C/strong> per frame (position, movement, static/dynamic)\u003C/li>\n\u003Cli>ML model prediction\u003C/li>\n\u003Cli>Shot classification\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>30 FPS video processing\u003C/li>\n\u003Cli>Features extracted with OpenCV and Pandas\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-machine-learning\">🤖 Machine Learning\u003C/h2>\n\u003Cul>\n\u003Cli>Initial model: \u003Cstrong>Random Forest\u003C/strong>\u003C/li>\n\u003Cli>Model saved using \u003Cstrong>joblib\u003C/strong>\u003C/li>\n\u003Cli>Evaluation metrics: \u003Cstrong>accuracy\u003C/strong>, \u003Cstrong>confusion matrix\u003C/strong>, \u003Cstrong>ROC curve\u003C/strong>, \u003Cstrong>AUC\u003C/strong>\u003C/li>\n\u003Cli>May evolve toward \u003Cstrong>deep learning\u003C/strong> depending on results\u003C/li>\n\u003C/ul>\n\u003Cp>Development will start in notebooks and later be modularized into reusable Python components.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-integration-with-databad\">🧩 Integration with DataBad\u003C/h2>\n\u003Cp>This classifier will be integrated into the \u003Cstrong>match review\u003C/strong> section of DataBad, to provide users with \u003Cstrong>automatic summaries\u003C/strong> of their rallies and shot patterns.\u003C/p>\n\u003Cp>Eventually, this should enable:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Targeted stats\u003C/strong> (e.g. smash success rate)\u003C/li>\n\u003Cli>\u003Cstrong>Automatic match highlights\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Visual overlays\u003C/strong> of predictions on the video timeline\u003C/li>\n\u003C/ul>\n\u003Cp>The module will run locally, designed for individual players first.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-status\">🚧 Status\u003C/h2>\n\u003Cp>The project is still in the \u003Cstrong>prototype phase\u003C/strong>.\u003Cbr>\nNext steps include:\u003C/p>\n\u003Cul>\n\u003Cli>Manual annotation of initial matches\u003C/li>\n\u003Cli>Testing basic models\u003C/li>\n\u003Cli>Evaluating performance on a small dataset\u003C/li>\n\u003C/ul>\n\u003Chr>",{"headings":37,"localImagePaths":60,"remoteImagePaths":61,"frontmatter":62,"imagePaths":65},[38,42,45,48,51,54,57],{"depth":39,"slug":40,"text":41},2,"-context","🧩 Context",{"depth":39,"slug":43,"text":44},"-objectives","🎯 Objectives",{"depth":39,"slug":46,"text":47},"-data--annotations","🎥 Data & annotations",{"depth":39,"slug":49,"text":50},"-technical-pipeline","🧠 Technical pipeline",{"depth":39,"slug":52,"text":53},"-machine-learning","🤖 Machine Learning",{"depth":39,"slug":55,"text":56},"-integration-with-databad","🧩 Integration with DataBad",{"depth":39,"slug":58,"text":59},"-status","🚧 Status",[],[],{"title":14,"slug":11,"locale":15,"description":16,"stack":63,"image":17,"github":18,"tag":64,"translationOf":27,"category":30,"startDate":28,"endDate":18,"updatedDate":29},[20,21,22,23,24],[26],[],"badminton-ml.en.md","query-maker_fr",{"id":67,"data":69,"body":85,"filePath":86,"digest":87,"rendered":88,"legacyId":116},{"title":70,"locale":71,"description":72,"image":73,"github":18,"stack":74,"tag":79,"translationOf":81,"startDate":82,"endDate":83,"updatedDate":29,"category":84},"QueryBot API","fr","Une API RESTful pour automatiser la création de tickets JIRA à partir de bases de données internes. Conçue pour les équipes cliniques de Median Technologies.","/img/median.png",[20,75,76,77,78],"FastAPI","JIRA API","SQL","OAuth",[80],"À la une","query-maker","2025-03-20","2025-07-20","pro","## 🧩 Contexte\r\n\r\nDurant mon alternance chez **Median Technologies**, j’ai conçu une API nommée **QueryBot** pour automatiser la création de tickets JIRA dans le cadre de projets d’imagerie médicale.  \r\nL’objectif : éviter les oublis manuels en s’appuyant sur des règles de détection issues de bases de données internes.\r\n\r\nCe projet a été lancé en interne, pour simplifier les workflows des **chefs de projet cliniques**, et fiabiliser le suivi opérationnel.\r\n\r\n---\r\n\r\n## ⚙️ Fonctionnalités\r\n\r\n- Génération automatique de tickets JIRA selon des règles personnalisées\r\n- Lecture des tickets existants pour éviter les doublons (idempotence)\r\n- Assignation intelligente selon le type d’anomalie\r\n- Validation des données en amont et gestion des erreurs\r\n- Mode dry-run, multi-environnements (`dev`, `préprod`, `prod`)\r\n- Logs complets pour traçabilité et audit\r\n\r\n---\r\n\r\n## 🧠 Architecture technique\r\n\r\n\r\nSQL + CSV \r\n   ↓\r\nPré-traitement Python (filtrage, mapping, validation)\r\n   ↓\r\nConstruction JSON\r\n   ↓\r\nAppel à l’API JIRA via FastAPI\r\n   ↓\r\nLogger + réponse\r\n\r\n\r\n- Traitement en arrière-plan\r\n- Système de mapping dynamique pour chaque environnement\r\n- Gestion d'erreurs centralisée\r\n- Authentification sécurisée via OAuth\r\n\r\n## 🧪 Qualité & robustesse\r\n\r\n- Tests unitaires avec pytest\r\n- Logs techniques et fonctionnels (niveau INFO/ERROR)\r\n- Séparation claire des environnements (config_dev.json, etc.)\r\n\r\n\r\n## 🚀 Déploiement & usage\r\n\r\n- Déploiement prévu en août 2025\r\n- Utilisée en production par une vingtaine de chefs de projet\r\n- Connectée à l’écosystème JIRA de l’entreprise\r\n- Stack légère, déployable sur les serveurs internes\r\n\r\n## 💡 Impact\r\nMême si les retours utilisateurs sont à venir, QueryMaker permettra :\r\n- un gain de temps sur les créations de tickets\r\n- une réduction du risque d’oubli\r\n- un meilleur suivi qualité sur les projets cliniques complexes","src/content/projects/query-maker.fr.md","d0a9bbe0faf3c51b",{"html":89,"metadata":90},"\u003Ch2 id=\"-contexte\">🧩 Contexte\u003C/h2>\n\u003Cp>Durant mon alternance chez \u003Cstrong>Median Technologies\u003C/strong>, j’ai conçu une API nommée \u003Cstrong>QueryBot\u003C/strong> pour automatiser la création de tickets JIRA dans le cadre de projets d’imagerie médicale.\u003Cbr>\nL’objectif : éviter les oublis manuels en s’appuyant sur des règles de détection issues de bases de données internes.\u003C/p>\n\u003Cp>Ce projet a été lancé en interne, pour simplifier les workflows des \u003Cstrong>chefs de projet cliniques\u003C/strong>, et fiabiliser le suivi opérationnel.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-fonctionnalités\">⚙️ Fonctionnalités\u003C/h2>\n\u003Cul>\n\u003Cli>Génération automatique de tickets JIRA selon des règles personnalisées\u003C/li>\n\u003Cli>Lecture des tickets existants pour éviter les doublons (idempotence)\u003C/li>\n\u003Cli>Assignation intelligente selon le type d’anomalie\u003C/li>\n\u003Cli>Validation des données en amont et gestion des erreurs\u003C/li>\n\u003Cli>Mode dry-run, multi-environnements (\u003Ccode>dev\u003C/code>, \u003Ccode>préprod\u003C/code>, \u003Ccode>prod\u003C/code>)\u003C/li>\n\u003Cli>Logs complets pour traçabilité et audit\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-architecture-technique\">🧠 Architecture technique\u003C/h2>\n\u003Cp>SQL + CSV\r\n↓\r\nPré-traitement Python (filtrage, mapping, validation)\r\n↓\r\nConstruction JSON\r\n↓\r\nAppel à l’API JIRA via FastAPI\r\n↓\r\nLogger + réponse\u003C/p>\n\u003Cul>\n\u003Cli>Traitement en arrière-plan\u003C/li>\n\u003Cli>Système de mapping dynamique pour chaque environnement\u003C/li>\n\u003Cli>Gestion d’erreurs centralisée\u003C/li>\n\u003Cli>Authentification sécurisée via OAuth\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-qualité--robustesse\">🧪 Qualité &#x26; robustesse\u003C/h2>\n\u003Cul>\n\u003Cli>Tests unitaires avec pytest\u003C/li>\n\u003Cli>Logs techniques et fonctionnels (niveau INFO/ERROR)\u003C/li>\n\u003Cli>Séparation claire des environnements (config_dev.json, etc.)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-déploiement--usage\">🚀 Déploiement &#x26; usage\u003C/h2>\n\u003Cul>\n\u003Cli>Déploiement prévu en août 2025\u003C/li>\n\u003Cli>Utilisée en production par une vingtaine de chefs de projet\u003C/li>\n\u003Cli>Connectée à l’écosystème JIRA de l’entreprise\u003C/li>\n\u003Cli>Stack légère, déployable sur les serveurs internes\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-impact\">💡 Impact\u003C/h2>\n\u003Cp>Même si les retours utilisateurs sont à venir, QueryMaker permettra :\u003C/p>\n\u003Cul>\n\u003Cli>un gain de temps sur les créations de tickets\u003C/li>\n\u003Cli>une réduction du risque d’oubli\u003C/li>\n\u003Cli>un meilleur suivi qualité sur les projets cliniques complexes\u003C/li>\n\u003C/ul>",{"headings":91,"localImagePaths":110,"remoteImagePaths":111,"frontmatter":112,"imagePaths":115},[92,95,98,101,104,107],{"depth":39,"slug":93,"text":94},"-contexte","🧩 Contexte",{"depth":39,"slug":96,"text":97},"️-fonctionnalités","⚙️ Fonctionnalités",{"depth":39,"slug":99,"text":100},"-architecture-technique","🧠 Architecture technique",{"depth":39,"slug":102,"text":103},"-qualité--robustesse","🧪 Qualité & robustesse",{"depth":39,"slug":105,"text":106},"-déploiement--usage","🚀 Déploiement & usage",{"depth":39,"slug":108,"text":109},"-impact","💡 Impact",[],[],{"title":70,"slug":67,"description":72,"stack":113,"image":73,"github":18,"tag":114,"locale":71,"translationOf":81,"category":84,"startDate":82,"endDate":83,"updatedDate":29},[20,75,76,77,78],[80],[],"query-maker.fr.md","badminton-ml_fr",{"id":117,"data":119,"body":125,"filePath":126,"digest":127,"rendered":128,"legacyId":155},{"title":120,"locale":71,"description":121,"image":17,"github":18,"stack":122,"tag":123,"translationOf":27,"startDate":28,"endDate":18,"updatedDate":29,"category":30},"🏸 Classificateur de coups au badminton","Un module de machine learning pour identifier les coups dans un match de badminton, et aider les joueurs à mieux se connaître.",[20,21,22,23,24],[124],"Bientôt disponible","## 🧩 Contexte\r\n\r\nCe projet s’inscrit dans **DataBad**, mon initiative personnelle pour permettre aux joueurs de badminton d’analyser leurs matchs à l’aide des données.  \r\nL’objectif global est de mieux comprendre son propre style de jeu, d’identifier des axes de progression et de faciliter l'entraînement personnalisé.\r\n\r\nCe classificateur de coups constitue l’un des modules de cette suite : il vise à identifier automatiquement, à partir de la vidéo d’un match, les types de coups joués (smash, dégagement, amorti, etc.).\r\n\r\nPensé d’abord pour moi, il a vocation à être utile à terme pour des **joueurs, coachs, clubs ou fédérations** souhaitant exploiter la data dans leur stratégie.\r\n\r\n---\r\n\r\n## 🎯 Objectifs\r\n\r\n- Identifier le **début et la fin de chaque point**\r\n- Détecter les **services** et scorer automatiquement\r\n- Classifier les **types de coups** joués (à venir)\r\n- Permettre une analyse post-match des séquences et des highlights\r\n- Offrir une base solide pour le coaching individualisé\r\n\r\n---\r\n\r\n## 🎥 Données et annotations\r\n\r\nLe projet repose sur des vidéos filmées lors de mes propres matchs (plusieurs heures de rush).  \r\nJe prévois d’annoter manuellement les premières séquences pour constituer un jeu d’apprentissage, en intégrant :\r\n\r\n- Le timecode des services\r\n- Le début/fin de point\r\n- Le type de coup (par la suite)\r\n\r\n---\r\n\r\n## 🧠 Pipeline technique\r\n\r\nLe pipeline s’articule ainsi :\r\n\r\n1. **Détection de pose** via MediaPipe\r\n2. Extraction des **features** par image (position, mouvement, statique/dynamique…)\r\n3. Passage dans un modèle ML\r\n4. Prédiction du type de coup\r\n\r\n- Traitement à **30 FPS**\r\n- Extraction de features avec OpenCV et Pandas\r\n- Annotation prévue dans un format standard (CSV ou JSON)\r\n\r\n---\r\n\r\n## 🤖 Machine Learning\r\n\r\n- Modèle initial : **Random Forest**\r\n- Enregistrement avec **joblib**\r\n- Évaluation prévue : **accuracy**, **matrice de confusion**, **courbe ROC**, **AUC**\r\n- Possibilité d’évolution vers du **deep learning** si besoin\r\n\r\nLe tout sera développé en notebook dans un premier temps, puis structuré en modules Python réutilisables.\r\n\r\n---\r\n\r\n## 🧩 Intégration DataBad\r\n\r\nCe module sera intégré à la partie **review de match** de DataBad, pour fournir à l’utilisateur un **résumé automatique** des coups et points joués.\r\n\r\nL’idée est de permettre, à terme :\r\n- des **analyses statistiques ciblées** (ex. taux de smash gagnants)\r\n- des **highlights vidéo automatiques**\r\n- une **restitution visuelle des prédictions dans la vidéo**\r\n\r\nLe fonctionnement restera local, avec une interface pensée pour le joueur individuel.\r\n\r\n---\r\n\r\n## 🚧 Statut\r\n\r\nLe projet est encore en **phase de prototype**.  \r\nL’étape suivante sera :\r\n- l’annotation manuelle des premiers matchs\r\n- le test de modèles simples\r\n- l’évaluation sur un petit jeu de données\r\n\r\n---","src/content/projects/badminton-ml.fr.md","6ed01ffcdaafa9cd",{"html":129,"metadata":130},"\u003Ch2 id=\"-contexte\">🧩 Contexte\u003C/h2>\n\u003Cp>Ce projet s’inscrit dans \u003Cstrong>DataBad\u003C/strong>, mon initiative personnelle pour permettre aux joueurs de badminton d’analyser leurs matchs à l’aide des données.\u003Cbr>\nL’objectif global est de mieux comprendre son propre style de jeu, d’identifier des axes de progression et de faciliter l’entraînement personnalisé.\u003C/p>\n\u003Cp>Ce classificateur de coups constitue l’un des modules de cette suite : il vise à identifier automatiquement, à partir de la vidéo d’un match, les types de coups joués (smash, dégagement, amorti, etc.).\u003C/p>\n\u003Cp>Pensé d’abord pour moi, il a vocation à être utile à terme pour des \u003Cstrong>joueurs, coachs, clubs ou fédérations\u003C/strong> souhaitant exploiter la data dans leur stratégie.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-objectifs\">🎯 Objectifs\u003C/h2>\n\u003Cul>\n\u003Cli>Identifier le \u003Cstrong>début et la fin de chaque point\u003C/strong>\u003C/li>\n\u003Cli>Détecter les \u003Cstrong>services\u003C/strong> et scorer automatiquement\u003C/li>\n\u003Cli>Classifier les \u003Cstrong>types de coups\u003C/strong> joués (à venir)\u003C/li>\n\u003Cli>Permettre une analyse post-match des séquences et des highlights\u003C/li>\n\u003Cli>Offrir une base solide pour le coaching individualisé\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-données-et-annotations\">🎥 Données et annotations\u003C/h2>\n\u003Cp>Le projet repose sur des vidéos filmées lors de mes propres matchs (plusieurs heures de rush).\u003Cbr>\nJe prévois d’annoter manuellement les premières séquences pour constituer un jeu d’apprentissage, en intégrant :\u003C/p>\n\u003Cul>\n\u003Cli>Le timecode des services\u003C/li>\n\u003Cli>Le début/fin de point\u003C/li>\n\u003Cli>Le type de coup (par la suite)\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-pipeline-technique\">🧠 Pipeline technique\u003C/h2>\n\u003Cp>Le pipeline s’articule ainsi :\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Détection de pose\u003C/strong> via MediaPipe\u003C/li>\n\u003Cli>Extraction des \u003Cstrong>features\u003C/strong> par image (position, mouvement, statique/dynamique…)\u003C/li>\n\u003Cli>Passage dans un modèle ML\u003C/li>\n\u003Cli>Prédiction du type de coup\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>Traitement à \u003Cstrong>30 FPS\u003C/strong>\u003C/li>\n\u003Cli>Extraction de features avec OpenCV et Pandas\u003C/li>\n\u003Cli>Annotation prévue dans un format standard (CSV ou JSON)\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-machine-learning\">🤖 Machine Learning\u003C/h2>\n\u003Cul>\n\u003Cli>Modèle initial : \u003Cstrong>Random Forest\u003C/strong>\u003C/li>\n\u003Cli>Enregistrement avec \u003Cstrong>joblib\u003C/strong>\u003C/li>\n\u003Cli>Évaluation prévue : \u003Cstrong>accuracy\u003C/strong>, \u003Cstrong>matrice de confusion\u003C/strong>, \u003Cstrong>courbe ROC\u003C/strong>, \u003Cstrong>AUC\u003C/strong>\u003C/li>\n\u003Cli>Possibilité d’évolution vers du \u003Cstrong>deep learning\u003C/strong> si besoin\u003C/li>\n\u003C/ul>\n\u003Cp>Le tout sera développé en notebook dans un premier temps, puis structuré en modules Python réutilisables.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-intégration-databad\">🧩 Intégration DataBad\u003C/h2>\n\u003Cp>Ce module sera intégré à la partie \u003Cstrong>review de match\u003C/strong> de DataBad, pour fournir à l’utilisateur un \u003Cstrong>résumé automatique\u003C/strong> des coups et points joués.\u003C/p>\n\u003Cp>L’idée est de permettre, à terme :\u003C/p>\n\u003Cul>\n\u003Cli>des \u003Cstrong>analyses statistiques ciblées\u003C/strong> (ex. taux de smash gagnants)\u003C/li>\n\u003Cli>des \u003Cstrong>highlights vidéo automatiques\u003C/strong>\u003C/li>\n\u003Cli>une \u003Cstrong>restitution visuelle des prédictions dans la vidéo\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cp>Le fonctionnement restera local, avec une interface pensée pour le joueur individuel.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-statut\">🚧 Statut\u003C/h2>\n\u003Cp>Le projet est encore en \u003Cstrong>phase de prototype\u003C/strong>.\u003Cbr>\nL’étape suivante sera :\u003C/p>\n\u003Cul>\n\u003Cli>l’annotation manuelle des premiers matchs\u003C/li>\n\u003Cli>le test de modèles simples\u003C/li>\n\u003Cli>l’évaluation sur un petit jeu de données\u003C/li>\n\u003C/ul>\n\u003Chr>",{"headings":131,"localImagePaths":149,"remoteImagePaths":150,"frontmatter":151,"imagePaths":154},[132,133,136,139,142,143,146],{"depth":39,"slug":93,"text":94},{"depth":39,"slug":134,"text":135},"-objectifs","🎯 Objectifs",{"depth":39,"slug":137,"text":138},"-données-et-annotations","🎥 Données et annotations",{"depth":39,"slug":140,"text":141},"-pipeline-technique","🧠 Pipeline technique",{"depth":39,"slug":52,"text":53},{"depth":39,"slug":144,"text":145},"-intégration-databad","🧩 Intégration DataBad",{"depth":39,"slug":147,"text":148},"-statut","🚧 Statut",[],[],{"title":120,"slug":117,"locale":71,"description":121,"stack":152,"image":17,"github":18,"tag":153,"translationOf":27,"category":30,"startDate":28,"endDate":18,"updatedDate":29},[20,21,22,23,24],[124],[],"badminton-ml.fr.md","budget-tracker_en",{"id":156,"data":158,"body":171,"filePath":172,"digest":173,"rendered":174,"legacyId":203},{"title":159,"locale":15,"description":160,"image":161,"github":162,"stack":163,"tag":166,"translationOf":168,"startDate":169,"endDate":170,"updatedDate":170,"category":30},"Budget Tracker","An interactive dashboard to track income, expenses, and monthly balances.","/img/screen_dashboard_1.png","https://github.com/your-user/dashboard-project",[20,24,164,165],"Streamlit","SQLite",[167],"Featured","budget-tracker","2025-01-07","2025-20-07","## 🧩 Context\r\n\r\nThis project was born from a very real need: to better understand where our shared household money was going.  \r\nI didn’t want to rely on third-party banking apps (often paid or too rigid), so I decided to create **my own solution**, built to last and evolve with our habits.\r\n\r\nI wanted something local, personalized, easy to use — yet powerful enough to provide true **financial visibility**.\r\n\r\n---\r\n\r\n## ⚙️ Features\r\n\r\n- **Secure import** of CSV files from our bank\r\n- **Manual entry** of one-off transactions\r\n- **Full history** of 400+ transactions\r\n- **Duplicate detection** using a unique identifier (title + date + amount)\r\n- **Spending and balance analysis** by category and period\r\n- **Automatic budget suggestions** for upcoming months\r\n- **Validation and reconciliation system** for transactions\r\n- **Data archiving** to prevent accidental loss\r\n\r\n---\r\n\r\n## 🖥️ App structure\r\n\r\nThe app is built around five core modules:\r\n\r\n1. **Dashboard**: overview of key indicators (balance, income, expenses, alerts…)\r\n2. **CSV Import**: secure parsing of bank exports\r\n3. **Budget Proposal**: smart allocation of future expenses\r\n4. **Graphical Analysis**: interactive charts and spending breakdowns\r\n5. **Transaction Editor**: browse, update, categorize entries\r\n\r\n---\r\n\r\n## 🧠 Tech stack\r\n\r\n- **Python + Streamlit**: for a lightweight and intuitive user interface\r\n- **SQLite + SQLAlchemy**: fast, reliable local database\r\n- **Plotly**: dynamic, interactive data visualizations\r\n- Custom Streamlit components for advanced layout and navigation\r\n\r\n---\r\n\r\n## 🎯 Real-world impact\r\n\r\nI use Budget Tracker **every week** to stay on top of our finances.  \r\nIt helps me:\r\n- anticipate expenses and balance our monthly charges\r\n- spot patterns or unexpected spending categories\r\n- make more informed, confident financial decisions\r\n\r\nIt has caught the interest of my partner and my family.  \r\nI’m currently working on deploying it to a **local Raspberry Pi server**, so we can use it together at home.\r\n\r\n---\r\n\r\n## 📸 Preview\r\n\r\n![Dashboard Screenshot](/img/project_1/Page_1.png)\r\n\r\n---\r\n\r\n## 🔗 Resources\r\n\r\n- [View the code on GitHub](https://github.com/unshaft/budget-tracker)","src/content/projects/budget-tracker.en.md","284d1bedd06d978b",{"html":175,"metadata":176},"\u003Ch2 id=\"-context\">🧩 Context\u003C/h2>\n\u003Cp>This project was born from a very real need: to better understand where our shared household money was going.\u003Cbr>\nI didn’t want to rely on third-party banking apps (often paid or too rigid), so I decided to create \u003Cstrong>my own solution\u003C/strong>, built to last and evolve with our habits.\u003C/p>\n\u003Cp>I wanted something local, personalized, easy to use — yet powerful enough to provide true \u003Cstrong>financial visibility\u003C/strong>.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-features\">⚙️ Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Secure import\u003C/strong> of CSV files from our bank\u003C/li>\n\u003Cli>\u003Cstrong>Manual entry\u003C/strong> of one-off transactions\u003C/li>\n\u003Cli>\u003Cstrong>Full history\u003C/strong> of 400+ transactions\u003C/li>\n\u003Cli>\u003Cstrong>Duplicate detection\u003C/strong> using a unique identifier (title + date + amount)\u003C/li>\n\u003Cli>\u003Cstrong>Spending and balance analysis\u003C/strong> by category and period\u003C/li>\n\u003Cli>\u003Cstrong>Automatic budget suggestions\u003C/strong> for upcoming months\u003C/li>\n\u003Cli>\u003Cstrong>Validation and reconciliation system\u003C/strong> for transactions\u003C/li>\n\u003Cli>\u003Cstrong>Data archiving\u003C/strong> to prevent accidental loss\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"️-app-structure\">🖥️ App structure\u003C/h2>\n\u003Cp>The app is built around five core modules:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Dashboard\u003C/strong>: overview of key indicators (balance, income, expenses, alerts…)\u003C/li>\n\u003Cli>\u003Cstrong>CSV Import\u003C/strong>: secure parsing of bank exports\u003C/li>\n\u003Cli>\u003Cstrong>Budget Proposal\u003C/strong>: smart allocation of future expenses\u003C/li>\n\u003Cli>\u003Cstrong>Graphical Analysis\u003C/strong>: interactive charts and spending breakdowns\u003C/li>\n\u003Cli>\u003Cstrong>Transaction Editor\u003C/strong>: browse, update, categorize entries\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"-tech-stack\">🧠 Tech stack\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Python + Streamlit\u003C/strong>: for a lightweight and intuitive user interface\u003C/li>\n\u003Cli>\u003Cstrong>SQLite + SQLAlchemy\u003C/strong>: fast, reliable local database\u003C/li>\n\u003Cli>\u003Cstrong>Plotly\u003C/strong>: dynamic, interactive data visualizations\u003C/li>\n\u003Cli>Custom Streamlit components for advanced layout and navigation\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-real-world-impact\">🎯 Real-world impact\u003C/h2>\n\u003Cp>I use Budget Tracker \u003Cstrong>every week\u003C/strong> to stay on top of our finances.\u003Cbr>\nIt helps me:\u003C/p>\n\u003Cul>\n\u003Cli>anticipate expenses and balance our monthly charges\u003C/li>\n\u003Cli>spot patterns or unexpected spending categories\u003C/li>\n\u003Cli>make more informed, confident financial decisions\u003C/li>\n\u003C/ul>\n\u003Cp>It has caught the interest of my partner and my family.\u003Cbr>\nI’m currently working on deploying it to a \u003Cstrong>local Raspberry Pi server\u003C/strong>, so we can use it together at home.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-preview\">📸 Preview\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/project_1/Page_1.png\" alt=\"Dashboard Screenshot\">\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-resources\">🔗 Resources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/unshaft/budget-tracker\">View the code on GitHub\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":177,"localImagePaths":197,"remoteImagePaths":198,"frontmatter":199,"imagePaths":202},[178,179,182,185,188,191,194],{"depth":39,"slug":40,"text":41},{"depth":39,"slug":180,"text":181},"️-features","⚙️ Features",{"depth":39,"slug":183,"text":184},"️-app-structure","🖥️ App structure",{"depth":39,"slug":186,"text":187},"-tech-stack","🧠 Tech stack",{"depth":39,"slug":189,"text":190},"-real-world-impact","🎯 Real-world impact",{"depth":39,"slug":192,"text":193},"-preview","📸 Preview",{"depth":39,"slug":195,"text":196},"-resources","🔗 Resources",[],[],{"title":159,"slug":156,"locale":15,"description":160,"stack":200,"image":161,"github":162,"tag":201,"translationOf":168,"category":30,"startDate":169,"endDate":170,"updatedDate":170},[20,24,164,165],[167],[],"budget-tracker.en.md","budget-tracker_fr",{"id":204,"data":206,"body":211,"filePath":212,"digest":213,"rendered":214,"legacyId":241},{"title":159,"locale":71,"description":207,"image":161,"github":208,"stack":209,"tag":210,"translationOf":168,"startDate":169,"endDate":83,"updatedDate":83,"category":30},"Un tableau de bord interactif et évolutif pour suivre nos finances communes, analyser les dépenses et maîtriser notre budget.","https://github.com/unshaft/budget-tracker",[20,24,164,165],[80],"## 🧩 Contexte\r\n\r\nCe projet est né d’un besoin très concret : mieux comprendre où partait l’argent de notre compte commun avec ma compagne.  \r\nNe souhaitant pas utiliser une application bancaire externe (souvent payante ou peu flexible), j’ai décidé de créer **ma propre solution**, pensée pour durer et évoluer avec nos habitudes.\r\n\r\nJe voulais un outil local, personnalisable, simple à prendre en main, mais assez puissant pour offrir une vraie **visibilité budgétaire**.\r\n\r\n---\r\n\r\n## ⚙️ Fonctionnalités\r\n\r\n- **Import sécurisé** de fichiers CSV issus de notre banque\r\n- **Ajout manuel** de transactions ponctuelles\r\n- **Historique complet** de plus de 400 opérations\r\n- **Détection des doublons** via un identifiant unique (titre + date + montant)\r\n- **Analyse des soldes, revenus, dépenses, catégories**\r\n- **Propositions budgétaires automatiques** pour les mois à venir\r\n- **Système de validation** et de pointage des transactions\r\n- **Archivage** des données pour éviter toute perte\r\n\r\n---\r\n\r\n## 🖥️ Structure de l’application\r\n\r\nL’application s’organise autour de 5 modules principaux :\r\n\r\n1. **Dashboard** : aperçu des indicateurs clés (solde, revenus, dépenses, alertes…)\r\n2. **Import CSV** : traitement sécurisé des données bancaires\r\n3. **Proposition de budget** : répartition intelligente des postes de dépense\r\n4. **Analyse graphique** : évolution des finances, camemberts et histogrammes interactifs\r\n5. **Éditeur de transactions** : recherche, modification, catégorisation\r\n\r\n---\r\n\r\n## 🧠 Stack technique\r\n\r\n- **Python + Streamlit** : pour une interface légère, fluide et agréable à maintenir\r\n- **SQLite + SQLAlchemy** : base de données locale, rapide et stable\r\n- **Plotly** : visualisations dynamiques et interactives\r\n- Composants Streamlit avancés pour la disposition et la navigation\r\n\r\n---\r\n\r\n## 🎯 Impact & usage\r\n\r\nJ’utilise Budget Tracker **chaque semaine** pour suivre l’évolution de notre budget.  \r\nL’outil m’aide à :\r\n- anticiper les dépenses et mieux répartir les charges\r\n- repérer des schémas ou postes de dépenses inattendus\r\n- prendre des décisions financières plus sereinement\r\n\r\nIl a suscité l’intérêt de ma compagne et de ma famille. Je travaille actuellement à son déploiement sur un **mini serveur personnel** (Raspberry Pi) pour un accès partagé à la maison.\r\n\r\n---\r\n\r\n## 📸 Aperçu\r\n\r\n![Dashboard Screenshot](/img/project_1/Page_1.png)\r\n\r\n---\r\n\r\n## 🔗 Ressources\r\n\r\n- [Voir le code sur GitHub](https://github.com/unshaft/budget-tracker)","src/content/projects/budget-tracker.fr.md","6afca3a84058eed3",{"html":215,"metadata":216},"\u003Ch2 id=\"-contexte\">🧩 Contexte\u003C/h2>\n\u003Cp>Ce projet est né d’un besoin très concret : mieux comprendre où partait l’argent de notre compte commun avec ma compagne.\u003Cbr>\nNe souhaitant pas utiliser une application bancaire externe (souvent payante ou peu flexible), j’ai décidé de créer \u003Cstrong>ma propre solution\u003C/strong>, pensée pour durer et évoluer avec nos habitudes.\u003C/p>\n\u003Cp>Je voulais un outil local, personnalisable, simple à prendre en main, mais assez puissant pour offrir une vraie \u003Cstrong>visibilité budgétaire\u003C/strong>.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-fonctionnalités\">⚙️ Fonctionnalités\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Import sécurisé\u003C/strong> de fichiers CSV issus de notre banque\u003C/li>\n\u003Cli>\u003Cstrong>Ajout manuel\u003C/strong> de transactions ponctuelles\u003C/li>\n\u003Cli>\u003Cstrong>Historique complet\u003C/strong> de plus de 400 opérations\u003C/li>\n\u003Cli>\u003Cstrong>Détection des doublons\u003C/strong> via un identifiant unique (titre + date + montant)\u003C/li>\n\u003Cli>\u003Cstrong>Analyse des soldes, revenus, dépenses, catégories\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Propositions budgétaires automatiques\u003C/strong> pour les mois à venir\u003C/li>\n\u003Cli>\u003Cstrong>Système de validation\u003C/strong> et de pointage des transactions\u003C/li>\n\u003Cli>\u003Cstrong>Archivage\u003C/strong> des données pour éviter toute perte\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"️-structure-de-lapplication\">🖥️ Structure de l’application\u003C/h2>\n\u003Cp>L’application s’organise autour de 5 modules principaux :\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Dashboard\u003C/strong> : aperçu des indicateurs clés (solde, revenus, dépenses, alertes…)\u003C/li>\n\u003Cli>\u003Cstrong>Import CSV\u003C/strong> : traitement sécurisé des données bancaires\u003C/li>\n\u003Cli>\u003Cstrong>Proposition de budget\u003C/strong> : répartition intelligente des postes de dépense\u003C/li>\n\u003Cli>\u003Cstrong>Analyse graphique\u003C/strong> : évolution des finances, camemberts et histogrammes interactifs\u003C/li>\n\u003Cli>\u003Cstrong>Éditeur de transactions\u003C/strong> : recherche, modification, catégorisation\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"-stack-technique\">🧠 Stack technique\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Python + Streamlit\u003C/strong> : pour une interface légère, fluide et agréable à maintenir\u003C/li>\n\u003Cli>\u003Cstrong>SQLite + SQLAlchemy\u003C/strong> : base de données locale, rapide et stable\u003C/li>\n\u003Cli>\u003Cstrong>Plotly\u003C/strong> : visualisations dynamiques et interactives\u003C/li>\n\u003Cli>Composants Streamlit avancés pour la disposition et la navigation\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-impact--usage\">🎯 Impact &#x26; usage\u003C/h2>\n\u003Cp>J’utilise Budget Tracker \u003Cstrong>chaque semaine\u003C/strong> pour suivre l’évolution de notre budget.\u003Cbr>\nL’outil m’aide à :\u003C/p>\n\u003Cul>\n\u003Cli>anticiper les dépenses et mieux répartir les charges\u003C/li>\n\u003Cli>repérer des schémas ou postes de dépenses inattendus\u003C/li>\n\u003Cli>prendre des décisions financières plus sereinement\u003C/li>\n\u003C/ul>\n\u003Cp>Il a suscité l’intérêt de ma compagne et de ma famille. Je travaille actuellement à son déploiement sur un \u003Cstrong>mini serveur personnel\u003C/strong> (Raspberry Pi) pour un accès partagé à la maison.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-aperçu\">📸 Aperçu\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/project_1/Page_1.png\" alt=\"Dashboard Screenshot\">\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-ressources\">🔗 Ressources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/unshaft/budget-tracker\">Voir le code sur GitHub\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":217,"localImagePaths":235,"remoteImagePaths":236,"frontmatter":237,"imagePaths":240},[218,219,220,223,226,229,232],{"depth":39,"slug":93,"text":94},{"depth":39,"slug":96,"text":97},{"depth":39,"slug":221,"text":222},"️-structure-de-lapplication","🖥️ Structure de l’application",{"depth":39,"slug":224,"text":225},"-stack-technique","🧠 Stack technique",{"depth":39,"slug":227,"text":228},"-impact--usage","🎯 Impact & usage",{"depth":39,"slug":230,"text":231},"-aperçu","📸 Aperçu",{"depth":39,"slug":233,"text":234},"-ressources","🔗 Ressources",[],[],{"title":159,"slug":204,"locale":71,"description":207,"stack":238,"image":161,"github":208,"tag":239,"translationOf":168,"category":30,"startDate":169,"endDate":83,"updatedDate":83},[20,24,164,165],[80],[],"budget-tracker.fr.md","query-maker_en",{"id":242,"data":244,"body":248,"filePath":249,"digest":250,"rendered":251,"legacyId":273},{"title":70,"locale":15,"description":245,"image":73,"github":18,"stack":246,"tag":247,"translationOf":81,"startDate":82,"endDate":83,"updatedDate":29,"category":84},"A RESTful API to automate the creation of JIRA tickets from internal databases. Designed for clinical teams at Median Technologies.",[20,75,76,77,78],[167],"## 🧩 Context\r\n\r\nDuring my work-study at **Median Technologies**, I developed an API called **QueryBot** to automate the creation of JIRA tickets for medical imaging projects.  \r\nThe goal: avoid manual omissions by relying on detection rules derived from internal databases.\r\n\r\nThis internal tool was designed to simplify workflows for **clinical project managers** and ensure better operational tracking.\r\n\r\n---\r\n\r\n## ⚙️ Features\r\n\r\n- Automatic JIRA ticket creation based on customizable rules\r\n- Detection of existing tickets to avoid duplicates (idempotence)\r\n- Smart assignment based on the issue type\r\n- Pre-validation and error handling\r\n- Dry-run mode and multi-environment support (`dev`, `preprod`, `prod`)\r\n- Complete logging for traceability and audits\r\n\r\n---\r\n\r\n## 🧠 Technical architecture\r\n\r\n```txt\r\nSQL + CSV \r\n   ↓\r\nPython pre-processing (filtering, mapping, validation)\r\n   ↓\r\nJSON construction\r\n   ↓\r\nFastAPI call to JIRA\r\n   ↓\r\nLogger + response\r\n```\r\n\r\n- Runs in **background**\r\n- Dynamic mapping system per environment\r\n- Centralized error handling\r\n- Secure authentication via **OAuth**\r\n\r\n---\r\n\r\n## 🧪 Quality & robustness\r\n\r\n- Unit testing with **pytest**\r\n- Technical and functional logs (INFO/ERROR levels)\r\n- Clear environment separation (`config_dev.json`, etc.)\r\n\r\n\r\n---\r\n\r\n## 🚀 Deployment & usage\r\n\r\n- Deployment planned for **August 2025**\r\n- To be used in production by around **20 project managers**\r\n- Integrated into the company’s JIRA ecosystem\r\n- Lightweight stack, deployable on internal servers\r\n\r\n---\r\n\r\n## 💡 Impact\r\n\r\nAlthough user feedback is still to come, QueryBot is expected to:\r\n- **Save time** on ticket creation\r\n- **Reduce the risk of omissions**\r\n- **Improve quality tracking** for clinical project workflows\r\n\r\n---","src/content/projects/query-maker.en.md","6ece6505e49e5620",{"html":252,"metadata":253},"\u003Ch2 id=\"-context\">🧩 Context\u003C/h2>\n\u003Cp>During my work-study at \u003Cstrong>Median Technologies\u003C/strong>, I developed an API called \u003Cstrong>QueryBot\u003C/strong> to automate the creation of JIRA tickets for medical imaging projects.\u003Cbr>\nThe goal: avoid manual omissions by relying on detection rules derived from internal databases.\u003C/p>\n\u003Cp>This internal tool was designed to simplify workflows for \u003Cstrong>clinical project managers\u003C/strong> and ensure better operational tracking.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-features\">⚙️ Features\u003C/h2>\n\u003Cul>\n\u003Cli>Automatic JIRA ticket creation based on customizable rules\u003C/li>\n\u003Cli>Detection of existing tickets to avoid duplicates (idempotence)\u003C/li>\n\u003Cli>Smart assignment based on the issue type\u003C/li>\n\u003Cli>Pre-validation and error handling\u003C/li>\n\u003Cli>Dry-run mode and multi-environment support (\u003Ccode>dev\u003C/code>, \u003Ccode>preprod\u003C/code>, \u003Ccode>prod\u003C/code>)\u003C/li>\n\u003Cli>Complete logging for traceability and audits\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-technical-architecture\">🧠 Technical architecture\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>SQL + CSV \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   ↓\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Python pre-processing (filtering, mapping, validation)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   ↓\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>JSON construction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   ↓\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>FastAPI call to JIRA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   ↓\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Logger + response\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>Runs in \u003Cstrong>background\u003C/strong>\u003C/li>\n\u003Cli>Dynamic mapping system per environment\u003C/li>\n\u003Cli>Centralized error handling\u003C/li>\n\u003Cli>Secure authentication via \u003Cstrong>OAuth\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-quality--robustness\">🧪 Quality &#x26; robustness\u003C/h2>\n\u003Cul>\n\u003Cli>Unit testing with \u003Cstrong>pytest\u003C/strong>\u003C/li>\n\u003Cli>Technical and functional logs (INFO/ERROR levels)\u003C/li>\n\u003Cli>Clear environment separation (\u003Ccode>config_dev.json\u003C/code>, etc.)\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-deployment--usage\">🚀 Deployment &#x26; usage\u003C/h2>\n\u003Cul>\n\u003Cli>Deployment planned for \u003Cstrong>August 2025\u003C/strong>\u003C/li>\n\u003Cli>To be used in production by around \u003Cstrong>20 project managers\u003C/strong>\u003C/li>\n\u003Cli>Integrated into the company’s JIRA ecosystem\u003C/li>\n\u003Cli>Lightweight stack, deployable on internal servers\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-impact\">💡 Impact\u003C/h2>\n\u003Cp>Although user feedback is still to come, QueryBot is expected to:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Save time\u003C/strong> on ticket creation\u003C/li>\n\u003Cli>\u003Cstrong>Reduce the risk of omissions\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Improve quality tracking\u003C/strong> for clinical project workflows\u003C/li>\n\u003C/ul>\n\u003Chr>",{"headings":254,"localImagePaths":267,"remoteImagePaths":268,"frontmatter":269,"imagePaths":272},[255,256,257,260,263,266],{"depth":39,"slug":40,"text":41},{"depth":39,"slug":180,"text":181},{"depth":39,"slug":258,"text":259},"-technical-architecture","🧠 Technical architecture",{"depth":39,"slug":261,"text":262},"-quality--robustness","🧪 Quality & robustness",{"depth":39,"slug":264,"text":265},"-deployment--usage","🚀 Deployment & usage",{"depth":39,"slug":108,"text":109},[],[],{"title":70,"slug":242,"description":245,"stack":270,"image":73,"github":18,"tag":271,"locale":15,"translationOf":81,"category":84,"startDate":82,"endDate":83,"updatedDate":29},[20,75,76,77,78],[167],[],"query-maker.en.md"]