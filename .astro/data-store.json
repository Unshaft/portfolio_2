[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.1","content-config-digest","d346843f3eb9571e","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"http://localhost:4321\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{\"/\":\"/fr\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,45,46,73,74,97,98,119,120,169,170],"badminton-ml_en",{"id":11,"data":13,"body":31,"filePath":32,"digest":33,"rendered":34,"legacyId":44},{"title":14,"locale":15,"description":16,"image":17,"github":18,"stack":19,"tag":25,"translationOf":27,"startDate":28,"endDate":18,"updatedDate":29,"category":30},"Badminton Shot Classifier","en","A machine learning model to recognize badminton shots from annotated match videos. Coming soon.","/img/cbn.png","",[20,21,22,23,24],"Python","scikit-learn","OpenCV","MediaPipe","Pandas",[26],"Coming soon","badminton-ml","2024-10-01","2025-06-25","perso","This project is part of **DataBad**, my personal initiative to analyze badminton matches in detail.\r\n\r\nThe goal is to automatically classify each shot (clear, smash, net, drop...) using video data and structured annotations. It combines:\r\n\r\n- Pose estimation with **MediaPipe**\r\n- Shot labeling and segmentation\r\n- Frame-by-frame analysis with **OpenCV**\r\n- Training datasets from personal matches\r\n- Initial experiments with SVM and Random Forest\r\n\r\n> The project is currently under development and will be progressively integrated into the DataBad ecosystem.","src/content/projects/badminton-ml.en.md","620e8a0044ae760c",{"html":35,"metadata":36},"\u003Cp>This project is part of \u003Cstrong>DataBad\u003C/strong>, my personal initiative to analyze badminton matches in detail.\u003C/p>\n\u003Cp>The goal is to automatically classify each shot (clear, smash, net, drop…) using video data and structured annotations. It combines:\u003C/p>\n\u003Cul>\n\u003Cli>Pose estimation with \u003Cstrong>MediaPipe\u003C/strong>\u003C/li>\n\u003Cli>Shot labeling and segmentation\u003C/li>\n\u003Cli>Frame-by-frame analysis with \u003Cstrong>OpenCV\u003C/strong>\u003C/li>\n\u003Cli>Training datasets from personal matches\u003C/li>\n\u003Cli>Initial experiments with SVM and Random Forest\u003C/li>\n\u003C/ul>\n\u003Cblockquote>\n\u003Cp>The project is currently under development and will be progressively integrated into the DataBad ecosystem.\u003C/p>\n\u003C/blockquote>",{"headings":37,"localImagePaths":38,"remoteImagePaths":39,"frontmatter":40,"imagePaths":43},[],[],[],{"title":14,"slug":11,"locale":15,"description":16,"stack":41,"image":17,"github":18,"tag":42,"translationOf":27,"category":30,"startDate":28,"endDate":18,"updatedDate":29},[20,21,22,23,24],[26],[],"badminton-ml.en.md","query-maker_en",{"id":45,"data":47,"body":59,"filePath":60,"digest":61,"rendered":62,"legacyId":72},{"title":48,"locale":15,"description":49,"image":50,"github":18,"stack":51,"tag":55,"translationOf":57,"startDate":18,"endDate":18,"updatedDate":18,"category":58},"QueryBot API","A RESTful API that automates the creation of JIRA tickets from medical imaging data. Used internally at Median Technologies.","/img/median.png",[20,52,53,54],"FastAPI","JIRA API","SQL",[56],"Featured","query-maker","pro","This project was developed during my time at **Median Technologies** to streamline the reporting workflow in medical imaging projects.\r\n\r\nThe API receives query data from DICOM files and generates well-structured tickets directly in **JIRA**, following predefined rules and custom field mappings. A dry-run mode, logging system and environment separation ensure safety and traceability.\r\n\r\nMain features include:\r\n\r\n- Dynamic ticket creation with field mapping\r\n- Automatic detection of existing tickets (idempotent)\r\n- JSON-based configuration and extensibility\r\n- FastAPI endpoints with Swagger UI\r\n- Dockerized for deployment on internal servers\r\n\r\n> Designed for production use by clinical operations teams.","src/content/projects/query-maker.en.md","69bc6a7cef3767aa",{"html":63,"metadata":64},"\u003Cp>This project was developed during my time at \u003Cstrong>Median Technologies\u003C/strong> to streamline the reporting workflow in medical imaging projects.\u003C/p>\n\u003Cp>The API receives query data from DICOM files and generates well-structured tickets directly in \u003Cstrong>JIRA\u003C/strong>, following predefined rules and custom field mappings. A dry-run mode, logging system and environment separation ensure safety and traceability.\u003C/p>\n\u003Cp>Main features include:\u003C/p>\n\u003Cul>\n\u003Cli>Dynamic ticket creation with field mapping\u003C/li>\n\u003Cli>Automatic detection of existing tickets (idempotent)\u003C/li>\n\u003Cli>JSON-based configuration and extensibility\u003C/li>\n\u003Cli>FastAPI endpoints with Swagger UI\u003C/li>\n\u003Cli>Dockerized for deployment on internal servers\u003C/li>\n\u003C/ul>\n\u003Cblockquote>\n\u003Cp>Designed for production use by clinical operations teams.\u003C/p>\n\u003C/blockquote>",{"headings":65,"localImagePaths":66,"remoteImagePaths":67,"frontmatter":68,"imagePaths":71},[],[],[],{"title":48,"slug":45,"description":49,"stack":69,"image":50,"github":18,"tag":70,"locale":15,"translationOf":57,"category":58,"startDate":18,"endDate":18,"updatedDate":18},[20,52,53,54],[56],[],"query-maker.en.md","query-maker_fr",{"id":73,"data":75,"body":83,"filePath":84,"digest":85,"rendered":86,"legacyId":96},{"title":48,"locale":76,"description":77,"image":50,"github":18,"stack":78,"tag":79,"translationOf":57,"startDate":81,"endDate":82,"updatedDate":82,"category":58},"fr","Une API RESTful pour automatiser la création de tickets JIRA à partir de données d’imagerie médicale. Utilisée en interne chez Median Technologies.",[20,52,53,54],[80],"À la une","2025-03-20","2025-07-20","Ce projet a été développé durant mon alternance chez **Median Technologies** pour automatiser la création de tickets dans le cadre des projets d’imagerie médicale.\r\n\r\nL’API reçoit des données issues de fichiers DICOM et génère automatiquement des tickets JIRA structurés, selon des règles prédéfinies et des mappings de champs personnalisés. Un mode dry-run, un système de logs et une séparation des environnements assurent robustesse et traçabilité.\r\n\r\nFonctionnalités principales :\r\n\r\n- Création dynamique de tickets avec mapping de champs\r\n- Détection automatique des tickets existants (idempotence)\r\n- Configuration JSON et extensibilité\r\n- Endpoints FastAPI avec Swagger UI\r\n- Dockerisé pour déploiement sur serveurs internes\r\n\r\n> Conçu pour un usage en production par les équipes d’opérations cliniques.","src/content/projects/query-maker.fr.md","85880dcf495423ca",{"html":87,"metadata":88},"\u003Cp>Ce projet a été développé durant mon alternance chez \u003Cstrong>Median Technologies\u003C/strong> pour automatiser la création de tickets dans le cadre des projets d’imagerie médicale.\u003C/p>\n\u003Cp>L’API reçoit des données issues de fichiers DICOM et génère automatiquement des tickets JIRA structurés, selon des règles prédéfinies et des mappings de champs personnalisés. Un mode dry-run, un système de logs et une séparation des environnements assurent robustesse et traçabilité.\u003C/p>\n\u003Cp>Fonctionnalités principales :\u003C/p>\n\u003Cul>\n\u003Cli>Création dynamique de tickets avec mapping de champs\u003C/li>\n\u003Cli>Détection automatique des tickets existants (idempotence)\u003C/li>\n\u003Cli>Configuration JSON et extensibilité\u003C/li>\n\u003Cli>Endpoints FastAPI avec Swagger UI\u003C/li>\n\u003Cli>Dockerisé pour déploiement sur serveurs internes\u003C/li>\n\u003C/ul>\n\u003Cblockquote>\n\u003Cp>Conçu pour un usage en production par les équipes d’opérations cliniques.\u003C/p>\n\u003C/blockquote>",{"headings":89,"localImagePaths":90,"remoteImagePaths":91,"frontmatter":92,"imagePaths":95},[],[],[],{"title":48,"slug":73,"description":77,"stack":93,"image":50,"github":18,"tag":94,"locale":76,"translationOf":57,"category":58,"startDate":81,"endDate":82,"updatedDate":82},[20,52,53,54],[80],[],"query-maker.fr.md","badminton-ml_fr",{"id":97,"data":99,"body":105,"filePath":106,"digest":107,"rendered":108,"legacyId":118},{"title":100,"locale":76,"description":101,"image":17,"github":18,"stack":102,"tag":103,"translationOf":27,"startDate":28,"endDate":18,"updatedDate":29,"category":30},"Classificateur de coups au badminton","Un modèle de machine learning pour reconnaître les coups au badminton à partir de vidéos annotées.",[20,21,22,23,24],[104],"Bientôt disponible","Ce projet fait partie de **DataBad**, mon initiative personnelle pour analyser en détail les matchs de badminton.\r\n\r\nL’objectif est de classifier automatiquement chaque coup (dégagement, smash, amorti...) à partir des données vidéo et d’annotations structurées. Il combine :\r\n\r\n- L’estimation de pose avec **MediaPipe**\r\n- L’étiquetage et la segmentation des coups\r\n- L’analyse image par image avec **OpenCV**\r\n- Des jeux de données issus de mes propres matchs\r\n- Des premiers tests avec SVM et Random Forest\r\n\r\n> Le projet est encore en développement et sera intégré progressivement à l’écosystème DataBad.","src/content/projects/badminton-ml.fr.md","cb81313ad52e8587",{"html":109,"metadata":110},"\u003Cp>Ce projet fait partie de \u003Cstrong>DataBad\u003C/strong>, mon initiative personnelle pour analyser en détail les matchs de badminton.\u003C/p>\n\u003Cp>L’objectif est de classifier automatiquement chaque coup (dégagement, smash, amorti…) à partir des données vidéo et d’annotations structurées. Il combine :\u003C/p>\n\u003Cul>\n\u003Cli>L’estimation de pose avec \u003Cstrong>MediaPipe\u003C/strong>\u003C/li>\n\u003Cli>L’étiquetage et la segmentation des coups\u003C/li>\n\u003Cli>L’analyse image par image avec \u003Cstrong>OpenCV\u003C/strong>\u003C/li>\n\u003Cli>Des jeux de données issus de mes propres matchs\u003C/li>\n\u003Cli>Des premiers tests avec SVM et Random Forest\u003C/li>\n\u003C/ul>\n\u003Cblockquote>\n\u003Cp>Le projet est encore en développement et sera intégré progressivement à l’écosystème DataBad.\u003C/p>\n\u003C/blockquote>",{"headings":111,"localImagePaths":112,"remoteImagePaths":113,"frontmatter":114,"imagePaths":117},[],[],[],{"title":100,"slug":97,"locale":76,"description":101,"stack":115,"image":17,"github":18,"tag":116,"translationOf":27,"category":30,"startDate":28,"endDate":18,"updatedDate":29},[20,21,22,23,24],[104],[],"badminton-ml.fr.md","budget-tracker_en",{"id":119,"data":121,"body":133,"filePath":134,"digest":135,"rendered":136,"legacyId":168},{"title":122,"locale":15,"description":123,"image":124,"github":125,"stack":126,"tag":129,"translationOf":130,"startDate":131,"endDate":132,"updatedDate":132,"category":30},"Budget Tracker","An interactive dashboard to track income, expenses, and monthly balances.","/img/screen_dashboard_1.png","https://github.com/your-user/dashboard-project",[20,24,127,128],"Streamlit","SQLite",[56],"budget-tracker","2025-01-07","2025-20-07","## 🧩 Context\r\n\r\nThis project was born from a very real need: to better understand where our shared household money was going.  \r\nI didn’t want to rely on third-party banking apps (often paid or too rigid), so I decided to create **my own solution**, built to last and evolve with our habits.\r\n\r\nI wanted something local, personalized, easy to use — yet powerful enough to provide true **financial visibility**.\r\n\r\n---\r\n\r\n## ⚙️ Features\r\n\r\n- **Secure import** of CSV files from our bank\r\n- **Manual entry** of one-off transactions\r\n- **Full history** of 400+ transactions\r\n- **Duplicate detection** using a unique identifier (title + date + amount)\r\n- **Spending and balance analysis** by category and period\r\n- **Automatic budget suggestions** for upcoming months\r\n- **Validation and reconciliation system** for transactions\r\n- **Data archiving** to prevent accidental loss\r\n\r\n---\r\n\r\n## 🖥️ App structure\r\n\r\nThe app is built around five core modules:\r\n\r\n1. **Dashboard**: overview of key indicators (balance, income, expenses, alerts…)\r\n2. **CSV Import**: secure parsing of bank exports\r\n3. **Budget Proposal**: smart allocation of future expenses\r\n4. **Graphical Analysis**: interactive charts and spending breakdowns\r\n5. **Transaction Editor**: browse, update, categorize entries\r\n\r\n---\r\n\r\n## 🧠 Tech stack\r\n\r\n- **Python + Streamlit**: for a lightweight and intuitive user interface\r\n- **SQLite + SQLAlchemy**: fast, reliable local database\r\n- **Plotly**: dynamic, interactive data visualizations\r\n- Custom Streamlit components for advanced layout and navigation\r\n\r\n---\r\n\r\n## 🎯 Real-world impact\r\n\r\nI use Budget Tracker **every week** to stay on top of our finances.  \r\nIt helps me:\r\n- anticipate expenses and balance our monthly charges\r\n- spot patterns or unexpected spending categories\r\n- make more informed, confident financial decisions\r\n\r\nIt has caught the interest of my partner and my family.  \r\nI’m currently working on deploying it to a **local Raspberry Pi server**, so we can use it together at home.\r\n\r\n---\r\n\r\n## 📸 Preview\r\n\r\n![Dashboard Screenshot](/img/project_1/Page_1.png)\r\n\r\n---\r\n\r\n## 🔗 Resources\r\n\r\n- [View the code on GitHub](https://github.com/unshaft/budget-tracker)","src/content/projects/budget-tracker.en.md","284d1bedd06d978b",{"html":137,"metadata":138},"\u003Ch2 id=\"-context\">🧩 Context\u003C/h2>\n\u003Cp>This project was born from a very real need: to better understand where our shared household money was going.\u003Cbr>\nI didn’t want to rely on third-party banking apps (often paid or too rigid), so I decided to create \u003Cstrong>my own solution\u003C/strong>, built to last and evolve with our habits.\u003C/p>\n\u003Cp>I wanted something local, personalized, easy to use — yet powerful enough to provide true \u003Cstrong>financial visibility\u003C/strong>.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-features\">⚙️ Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Secure import\u003C/strong> of CSV files from our bank\u003C/li>\n\u003Cli>\u003Cstrong>Manual entry\u003C/strong> of one-off transactions\u003C/li>\n\u003Cli>\u003Cstrong>Full history\u003C/strong> of 400+ transactions\u003C/li>\n\u003Cli>\u003Cstrong>Duplicate detection\u003C/strong> using a unique identifier (title + date + amount)\u003C/li>\n\u003Cli>\u003Cstrong>Spending and balance analysis\u003C/strong> by category and period\u003C/li>\n\u003Cli>\u003Cstrong>Automatic budget suggestions\u003C/strong> for upcoming months\u003C/li>\n\u003Cli>\u003Cstrong>Validation and reconciliation system\u003C/strong> for transactions\u003C/li>\n\u003Cli>\u003Cstrong>Data archiving\u003C/strong> to prevent accidental loss\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"️-app-structure\">🖥️ App structure\u003C/h2>\n\u003Cp>The app is built around five core modules:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Dashboard\u003C/strong>: overview of key indicators (balance, income, expenses, alerts…)\u003C/li>\n\u003Cli>\u003Cstrong>CSV Import\u003C/strong>: secure parsing of bank exports\u003C/li>\n\u003Cli>\u003Cstrong>Budget Proposal\u003C/strong>: smart allocation of future expenses\u003C/li>\n\u003Cli>\u003Cstrong>Graphical Analysis\u003C/strong>: interactive charts and spending breakdowns\u003C/li>\n\u003Cli>\u003Cstrong>Transaction Editor\u003C/strong>: browse, update, categorize entries\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"-tech-stack\">🧠 Tech stack\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Python + Streamlit\u003C/strong>: for a lightweight and intuitive user interface\u003C/li>\n\u003Cli>\u003Cstrong>SQLite + SQLAlchemy\u003C/strong>: fast, reliable local database\u003C/li>\n\u003Cli>\u003Cstrong>Plotly\u003C/strong>: dynamic, interactive data visualizations\u003C/li>\n\u003Cli>Custom Streamlit components for advanced layout and navigation\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-real-world-impact\">🎯 Real-world impact\u003C/h2>\n\u003Cp>I use Budget Tracker \u003Cstrong>every week\u003C/strong> to stay on top of our finances.\u003Cbr>\nIt helps me:\u003C/p>\n\u003Cul>\n\u003Cli>anticipate expenses and balance our monthly charges\u003C/li>\n\u003Cli>spot patterns or unexpected spending categories\u003C/li>\n\u003Cli>make more informed, confident financial decisions\u003C/li>\n\u003C/ul>\n\u003Cp>It has caught the interest of my partner and my family.\u003Cbr>\nI’m currently working on deploying it to a \u003Cstrong>local Raspberry Pi server\u003C/strong>, so we can use it together at home.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-preview\">📸 Preview\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/project_1/Page_1.png\" alt=\"Dashboard Screenshot\">\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-resources\">🔗 Resources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/unshaft/budget-tracker\">View the code on GitHub\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":139,"localImagePaths":162,"remoteImagePaths":163,"frontmatter":164,"imagePaths":167},[140,144,147,150,153,156,159],{"depth":141,"slug":142,"text":143},2,"-context","🧩 Context",{"depth":141,"slug":145,"text":146},"️-features","⚙️ Features",{"depth":141,"slug":148,"text":149},"️-app-structure","🖥️ App structure",{"depth":141,"slug":151,"text":152},"-tech-stack","🧠 Tech stack",{"depth":141,"slug":154,"text":155},"-real-world-impact","🎯 Real-world impact",{"depth":141,"slug":157,"text":158},"-preview","📸 Preview",{"depth":141,"slug":160,"text":161},"-resources","🔗 Resources",[],[],{"title":122,"slug":119,"locale":15,"description":123,"stack":165,"image":124,"github":125,"tag":166,"translationOf":130,"category":30,"startDate":131,"endDate":132,"updatedDate":132},[20,24,127,128],[56],[],"budget-tracker.en.md","budget-tracker_fr",{"id":169,"data":171,"body":176,"filePath":177,"digest":178,"rendered":179,"legacyId":210},{"title":122,"locale":76,"description":172,"image":124,"github":173,"stack":174,"tag":175,"translationOf":130,"startDate":131,"endDate":82,"updatedDate":82,"category":30},"Un tableau de bord interactif et évolutif pour suivre nos finances communes, analyser les dépenses et maîtriser notre budget.","https://github.com/unshaft/budget-tracker",[20,24,127,128],[80],"## 🧩 Contexte\r\n\r\nCe projet est né d’un besoin très concret : mieux comprendre où partait l’argent de notre compte commun avec ma compagne.  \r\nNe souhaitant pas utiliser une application bancaire externe (souvent payante ou peu flexible), j’ai décidé de créer **ma propre solution**, pensée pour durer et évoluer avec nos habitudes.\r\n\r\nJe voulais un outil local, personnalisable, simple à prendre en main, mais assez puissant pour offrir une vraie **visibilité budgétaire**.\r\n\r\n---\r\n\r\n## ⚙️ Fonctionnalités\r\n\r\n- **Import sécurisé** de fichiers CSV issus de notre banque\r\n- **Ajout manuel** de transactions ponctuelles\r\n- **Historique complet** de plus de 400 opérations\r\n- **Détection des doublons** via un identifiant unique (titre + date + montant)\r\n- **Analyse des soldes, revenus, dépenses, catégories**\r\n- **Propositions budgétaires automatiques** pour les mois à venir\r\n- **Système de validation** et de pointage des transactions\r\n- **Archivage** des données pour éviter toute perte\r\n\r\n---\r\n\r\n## 🖥️ Structure de l’application\r\n\r\nL’application s’organise autour de 5 modules principaux :\r\n\r\n1. **Dashboard** : aperçu des indicateurs clés (solde, revenus, dépenses, alertes…)\r\n2. **Import CSV** : traitement sécurisé des données bancaires\r\n3. **Proposition de budget** : répartition intelligente des postes de dépense\r\n4. **Analyse graphique** : évolution des finances, camemberts et histogrammes interactifs\r\n5. **Éditeur de transactions** : recherche, modification, catégorisation\r\n\r\n---\r\n\r\n## 🧠 Stack technique\r\n\r\n- **Python + Streamlit** : pour une interface légère, fluide et agréable à maintenir\r\n- **SQLite + SQLAlchemy** : base de données locale, rapide et stable\r\n- **Plotly** : visualisations dynamiques et interactives\r\n- Composants Streamlit avancés pour la disposition et la navigation\r\n\r\n---\r\n\r\n## 🎯 Impact & usage\r\n\r\nJ’utilise Budget Tracker **chaque semaine** pour suivre l’évolution de notre budget.  \r\nL’outil m’aide à :\r\n- anticiper les dépenses et mieux répartir les charges\r\n- repérer des schémas ou postes de dépenses inattendus\r\n- prendre des décisions financières plus sereinement\r\n\r\nIl a suscité l’intérêt de ma compagne et de ma famille. Je travaille actuellement à son déploiement sur un **mini serveur personnel** (Raspberry Pi) pour un accès partagé à la maison.\r\n\r\n---\r\n\r\n## 📸 Aperçu\r\n\r\n![Dashboard Screenshot](/img/project_1/Page_1.png)\r\n\r\n---\r\n\r\n## 🔗 Ressources\r\n\r\n- [Voir le code sur GitHub](https://github.com/unshaft/budget-tracker)","src/content/projects/budget-tracker.fr.md","6afca3a84058eed3",{"html":180,"metadata":181},"\u003Ch2 id=\"-contexte\">🧩 Contexte\u003C/h2>\n\u003Cp>Ce projet est né d’un besoin très concret : mieux comprendre où partait l’argent de notre compte commun avec ma compagne.\u003Cbr>\nNe souhaitant pas utiliser une application bancaire externe (souvent payante ou peu flexible), j’ai décidé de créer \u003Cstrong>ma propre solution\u003C/strong>, pensée pour durer et évoluer avec nos habitudes.\u003C/p>\n\u003Cp>Je voulais un outil local, personnalisable, simple à prendre en main, mais assez puissant pour offrir une vraie \u003Cstrong>visibilité budgétaire\u003C/strong>.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-fonctionnalités\">⚙️ Fonctionnalités\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Import sécurisé\u003C/strong> de fichiers CSV issus de notre banque\u003C/li>\n\u003Cli>\u003Cstrong>Ajout manuel\u003C/strong> de transactions ponctuelles\u003C/li>\n\u003Cli>\u003Cstrong>Historique complet\u003C/strong> de plus de 400 opérations\u003C/li>\n\u003Cli>\u003Cstrong>Détection des doublons\u003C/strong> via un identifiant unique (titre + date + montant)\u003C/li>\n\u003Cli>\u003Cstrong>Analyse des soldes, revenus, dépenses, catégories\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Propositions budgétaires automatiques\u003C/strong> pour les mois à venir\u003C/li>\n\u003Cli>\u003Cstrong>Système de validation\u003C/strong> et de pointage des transactions\u003C/li>\n\u003Cli>\u003Cstrong>Archivage\u003C/strong> des données pour éviter toute perte\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"️-structure-de-lapplication\">🖥️ Structure de l’application\u003C/h2>\n\u003Cp>L’application s’organise autour de 5 modules principaux :\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Dashboard\u003C/strong> : aperçu des indicateurs clés (solde, revenus, dépenses, alertes…)\u003C/li>\n\u003Cli>\u003Cstrong>Import CSV\u003C/strong> : traitement sécurisé des données bancaires\u003C/li>\n\u003Cli>\u003Cstrong>Proposition de budget\u003C/strong> : répartition intelligente des postes de dépense\u003C/li>\n\u003Cli>\u003Cstrong>Analyse graphique\u003C/strong> : évolution des finances, camemberts et histogrammes interactifs\u003C/li>\n\u003Cli>\u003Cstrong>Éditeur de transactions\u003C/strong> : recherche, modification, catégorisation\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"-stack-technique\">🧠 Stack technique\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Python + Streamlit\u003C/strong> : pour une interface légère, fluide et agréable à maintenir\u003C/li>\n\u003Cli>\u003Cstrong>SQLite + SQLAlchemy\u003C/strong> : base de données locale, rapide et stable\u003C/li>\n\u003Cli>\u003Cstrong>Plotly\u003C/strong> : visualisations dynamiques et interactives\u003C/li>\n\u003Cli>Composants Streamlit avancés pour la disposition et la navigation\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"-impact--usage\">🎯 Impact &#x26; usage\u003C/h2>\n\u003Cp>J’utilise Budget Tracker \u003Cstrong>chaque semaine\u003C/strong> pour suivre l’évolution de notre budget.\u003Cbr>\nL’outil m’aide à :\u003C/p>\n\u003Cul>\n\u003Cli>anticiper les dépenses et mieux répartir les charges\u003C/li>\n\u003Cli>repérer des schémas ou postes de dépenses inattendus\u003C/li>\n\u003Cli>prendre des décisions financières plus sereinement\u003C/li>\n\u003C/ul>\n\u003Cp>Il a suscité l’intérêt de ma compagne et de ma famille. Je travaille actuellement à son déploiement sur un \u003Cstrong>mini serveur personnel\u003C/strong> (Raspberry Pi) pour un accès partagé à la maison.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-aperçu\">📸 Aperçu\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/project_1/Page_1.png\" alt=\"Dashboard Screenshot\">\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"-ressources\">🔗 Ressources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/unshaft/budget-tracker\">Voir le code sur GitHub\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":182,"localImagePaths":204,"remoteImagePaths":205,"frontmatter":206,"imagePaths":209},[183,186,189,192,195,198,201],{"depth":141,"slug":184,"text":185},"-contexte","🧩 Contexte",{"depth":141,"slug":187,"text":188},"️-fonctionnalités","⚙️ Fonctionnalités",{"depth":141,"slug":190,"text":191},"️-structure-de-lapplication","🖥️ Structure de l’application",{"depth":141,"slug":193,"text":194},"-stack-technique","🧠 Stack technique",{"depth":141,"slug":196,"text":197},"-impact--usage","🎯 Impact & usage",{"depth":141,"slug":199,"text":200},"-aperçu","📸 Aperçu",{"depth":141,"slug":202,"text":203},"-ressources","🔗 Ressources",[],[],{"title":122,"slug":169,"locale":76,"description":172,"stack":207,"image":124,"github":173,"tag":208,"translationOf":130,"category":30,"startDate":131,"endDate":82,"updatedDate":82},[20,24,127,128],[80],[],"budget-tracker.fr.md"]